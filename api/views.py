from rest_framework import generics
from rest_framework.mixins import UpdateModelMixin, ListModelMixin
import pandas as pd
from rest_framework.response import Response
from .models import Assets, Vulnerabilities
from .serializers import (
    AssetsSerializer,
    FileUploadSerializer,
    VulnerabilitiesSerializer,
)


class AssetsAPIView(generics.GenericAPIView, ListModelMixin):
    serializer_class = AssetsSerializer

    def get_queryset(self):
        vulnerability = self.request.query_params.get("vulnerability")
        if vulnerability:
            return Assets.objects.filter(
                vulnerability_at_host__id=vulnerability
            )
        else:
            return Assets.objects.all()

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)


class AssetAPIView(generics.RetrieveAPIView):
    queryset = Assets.objects.all()
    serializer_class = AssetsSerializer


class VulnerabilitiesAPIView(generics.GenericAPIView, ListModelMixin):
    serializer_class = VulnerabilitiesSerializer

    def get_queryset(self):
        asset = self.request.query_params.get("asset")
        severity_param = self.request.query_params.get("severity")
        ordering = self.request.query_params.get("ordering")
        if asset:
            return Vulnerabilities.objects.filter(host=asset)
        if severity_param:
            return Vulnerabilities.objects.filter(severity=severity_param)
        if ordering:
            return Vulnerabilities.objects.order_by(ordering)
        else:
            return Vulnerabilities.objects.all()

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)


class VulnerabilityAPIView(generics.RetrieveAPIView):
    queryset = Vulnerabilities.objects.all()
    serializer_class = VulnerabilitiesSerializer


class VulnerabilityUpdateAPIView(generics.GenericAPIView, UpdateModelMixin):
    serializer_class = VulnerabilitiesSerializer

    def get_queryset(self):
        return Vulnerabilities.objects.filter(host=self.kwargs["asset_pk"])

    def patch(self, request, *args, **kwargs):
        return self.partial_update(request, *args, **kwargs)


class UploadFileView(generics.CreateAPIView):
    serializer_class = FileUploadSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        file = serializer.validated_data["file"]
        reader = pd.read_csv(file)
        for _, row in reader.iterrows():
            asset = Assets.objects.filter(
                hostname=row["ASSET - HOSTNAME"]
            )
            if not asset.exists():
                assets = Assets(
                    hostname=row["ASSET - HOSTNAME"],
                    ip_address=row["ASSET - IP_ADDRESS"],
                )
                assets.save()
            if type(row["VULNERABILITY - PUBLICATION_DATE"]) != str:
                row["VULNERABILITY - PUBLICATION_DATE"] = None
            new_vuln = Vulnerabilities(
                host=Assets.objects.get(hostname=row["ASSET - HOSTNAME"]),
                title=row["VULNERABILITY - TITLE"],
                severity=row["VULNERABILITY - SEVERITY"],
                cvss=row["VULNERABILITY - CVSS"],
                publication_date=row["VULNERABILITY - PUBLICATION_DATE"],
            )
            new_vuln.save()

        return Response({"status": "success"}, status=201)
