from rest_framework import generics
from rest_framework.mixins import UpdateModelMixin, ListModelMixin

from .models import Assets, Vulnerabilities
from .serializers import AssetsSerializer, VulnerabilitiesSerializer


class AssetsAPIView(generics.GenericAPIView, ListModelMixin):
    serializer_class = AssetsSerializer

    def get_queryset(self):
        vulnerability = self.request.query_params.get("vulnerability")
        if vulnerability:
            return Assets.objects.filter(
                vulnerability_at_host__id=vulnerability
            )
        else:
            return Assets.objects.all()

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)


class AssetAPIView(generics.RetrieveAPIView):
    queryset = Assets.objects.all()
    serializer_class = AssetsSerializer


class VulnerabilitiesAPIView(
    generics.GenericAPIView, ListModelMixin
):
    serializer_class = VulnerabilitiesSerializer

    def get_queryset(self):
        asset = self.request.query_params.get("asset")
        severity_param = self.request.query_params.get("severity")
        ordering = self.request.query_params.get("ordering")
        if asset:
            return Vulnerabilities.objects.filter(
                host=asset
            )
        if severity_param:
            return Vulnerabilities.objects.filter(
                severity=severity_param
            )
        if ordering:
            return Vulnerabilities.objects.order_by(
                ordering
            )
        else:
            return Vulnerabilities.objects.all()

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)


class VulnerabilityAPIView(generics.RetrieveAPIView):
    queryset = Vulnerabilities.objects.all()
    serializer_class = VulnerabilitiesSerializer


class VulnerabilityUpdateAPIView(generics.GenericAPIView, UpdateModelMixin):
    serializer_class = VulnerabilitiesSerializer

    def get_queryset(self):
        return Vulnerabilities.objects.filter(host=self.kwargs["asset_pk"])

    def patch(self, request, *args, **kwargs):
        return self.partial_update(request, *args, **kwargs)
